{"name":"Yell","body":"**Yell - Your Extensible Logging Library**\r\n\r\n[![Build Status](https://secure.travis-ci.org/rudionrails/yell.png?branch=master)](http://travis-ci.org/rudionrails/yell)\r\n\r\nYell works and is tested with ruby 1.8.7, 1.9.x, jruby 1.8 and 1.9 mode, rubinius 1.8 and 1.9 as well as ree.\r\n\r\n\r\n## Installation\r\n\r\nSystem wide:\r\n\r\n```console\r\ngem install yell\r\n```\r\n\r\nOr in your Gemfile:\r\n\r\n```ruby\r\ngem \"yell\"\r\n```\r\n\r\n\r\n## Usage\r\n\r\nOn the basics, you can use Yell just like any other logging library with a more \r\nsophisticated message formatter.\r\n\r\n```ruby\r\nlogger = Yell.new STDOUT\r\n\r\nlogger.info \"Hello World\"\r\n#=> \"2012-02-29T09:30:00+01:00 [ INFO] 65784 : Hello World\"\r\n#    ^                         ^       ^       ^\r\n#    ISO8601 Timestamp         Level   Pid     Message\r\n```\r\n\r\nThe strength of Yell, however, comes when using multiple adapters. The already built-in \r\nones are IO-based and require no further configuration. Also, there are additional ones \r\navailable as separate gems. Please consult the [wiki](https://github.com/rudionrails/yell/wiki) \r\non that - they are listed there.\r\n\r\nThe standard adapters are:\r\n\r\n`:stdout` : Messages will be written to STDOUT  \r\n`:stderr` : Messages will be written to STDERR  \r\n`:file` : Messages will be written to a file  \r\n`:datefile` : Messages will be written to a timestamped file  \r\n\r\n\r\nHere are some short examples on how to combine them:\r\n\r\n##### Example: Notice messages go into `STDOUT` and error messages into `STDERR`\r\n\r\n```ruby\r\nlogger = Yell.new do |l|\r\n  l.adapter STDOUT, :level => [:debug, :info, :warn]\r\n  l.adapter STDERR, :level => [:error, :fatal]\r\nend\r\n```\r\n\r\n##### Example: Typical production Logger\r\n\r\nWe setup a logger that starts passing messages at the `:info` level. Severities \r\nbelow `:error` go into the 'production.log', whereas anything higher is written \r\ninto the 'error.log'.\r\n\r\n```ruby\r\nlogger = Yell.new do |l|\r\n  l.level = :info # will only pass :info and above to the adapters\r\n\r\n  l.adapter :datefile, 'production.log', :level => Yell.level.lte(:warn)\r\n  l.adapter :datefile, 'error.log', :level => Yell.level.gte(:error)\r\nend\r\n```\r\n\r\n\r\n## Further Readings\r\n\r\n[How To: Setting The Log Level](https://github.com/rudionrails/yell/wiki/101-setting-the-log-level)  \r\n[How To: Formatting Log Messages](https://github.com/rudionrails/yell/wiki/101-formatting-log-messages)  \r\n[How To: Using Adapters](https://github.com/rudionrails/yell/wiki/101-using-adapters)  \r\n[How To: The Datefile Adapter](https://github.com/rudionrails/yell/wiki/101-the-datefile-adapter)  \r\n[How To: Different Adapters for Different Log Levels](https://github.com/rudionrails/yell/wiki/101-different-adapters-for-different-log-levels)  \r\n\r\n\r\nYou can find further examples and additional adapters in the [wiki](https://github.com/rudionrails/yell/wiki).\r\nor have a look into the examples folder.\r\n\r\n\r\nCopyright &copy; 2011-2012 Rudolf Schmidt, released under the MIT license.","tagline":"Yell - Your Extensible Logging Library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}